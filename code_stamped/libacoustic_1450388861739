###################################################
###################################################
##      import this library, not libepoch or     ##
##      whatever else                            ##
###################################################
###################################################

from pithy import *
from urllib import urlopen as uo
import json
import libSIUI as siui
import libEpoch
import libethercalc as ether

class Acoustics():
    def __init__(self,muxurl=None,etherurl=None,pulser=None,pulserurl=None):
        self.pre = "/home/pi/acoustic/data/"
        
        self.muxurl = muxurl #check+add trailing /
        self.pulserurl = pulserurl
        #self.pulserurl = 'http://localhost:9002/EPOCHmux.csv' #cuz.
        #self.initurl = 'http://localhost:9002/EPOCHmux-init.csv'
        
        if pulser.lower()=="epoch":
            self.pulser="epoch"
            self.p = libepoch.epoch(pulserurl)
        elif pulser.lower()=="siui":
            self.pulser="siui"
            self.p = siui.SIUI(pulserurl)
        else:
            raise AttributeError("no valid pulser type given!")
            
    def switchmux(self,chan):
        try:
            uo(self.muxurl+"%i" % int(chan)).read()
        except:
            error = 'WARNING: No channel %s on this mux' % q['Channel']
            print error
            
    
    def getSingleData(self,row):
        q = row
        fn = pre+"%s_%s_%s_%i.json" % (q['Name'],q['Channel'],label,int(time.time()))
            
        if self.pulser=="epoch":
            try:
                data = self.p.commander(q['Mode (tr/pe)'],
                                        gain=float(q['Gain (dB)']),
                                        tus_scale=int(q['Time (us)']),
                                        freq=float(q['Freq (MHz)']))
                rtime = [round(x,3) for x in list(data[0])]
                json.dump({'time (us)':rtime,'amp':list(data[1])}, open(fn,'w'))
            except:
                print '***ERROR***'
                import traceback
                print traceback.format_exc()
        elif self.pulser=="siui":
            #s.params['vset'] = 200
            #s.params['rng'] = 100
            #s.params['pw'] = 444 
            #s.params['rect'] = 'RF'
            #s.params['prf'] = 100
            #s.params['vel'] = 4000
            self.p.params['gain'] = q['Gain (dB)']
            self.p.params['freq'] = q['Freq (MHz)']+"MHz"
            self.p.params['mode'] = q['Mode (tr/pe)'].upper()
            data = s.setGetCheck()
            

if __name__=="__main__":
    a = Acoustics(pulser="siui",pulserurl="http://localhost:9600")
    d = a.getSingleData({'Gain (dB)':26,'Freq (MHz)':2.5,'Mode (tr/pe)':"TR"})
    print d
    

"""
init = False
while True:
    if init:
        queue = parsecsv(initurl)
        init = False
    else:
        queue = parsecsv(csvurl)
    for q in queue:
        #print q
        if q['Mode tr/pe/both'].lower() in ['tr','both']:
            switchmux(mm[int(q['Channel'])])
            getSingleData(q,True)
        if q['Mode tr/pe/both'].lower() in ['pe','both']:
            switchmux(mm[int(q['Channel'])]-1)
            getSingleData(q,False)
"""




























