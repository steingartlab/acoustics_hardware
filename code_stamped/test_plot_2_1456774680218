from pithy import *
import time
import matplotlib.gridspec as gridspec
import simplejson as json

figure(figsize=(4, 6))
gs = gridspec.GridSpec(29, 1)
ax_pot = plt.subplot(gs[20:24,0])
ax_cur = plt.subplot(gs[25:29,0])
ax_xrd = plt.subplot(gs[0:9,0])
ax_tr = plt.subplot(gs[10:19,0])

###########################
#########ECHEM DATA########

path = drop_pre + 'ANL_201602_Cycling_Data/Cycling/Data/Text_Files/'

fil = 'LFP_20160203_9b.001'

#cols:: 1:cyc# 3:TestTime 5:Amp-hr(capacity_passed) 7:Amps 8:Volt 9:State(R=rest,D=disch,C=char) 10:ES(0 looks like step change)

data = genfromtxt(path+fil,delimiter = '\t', skip_header = 5,usecols=(1,3,5,7,8,9,10),dtype=None)

cyc = []
tim = []
cap = []
cur = []
pot = []
ste = []
dst = []

for x in data:
    cyc.append(x[0])
    
    #convert TestTim to seconds elapsed
    tmp = x[1].split(' ')
    d = tmp[2].replace('d','')
    t = tmp[3].split(':')
    s = float(t[0])*3600 + float(t[1])*60 + float(t[2])
    tim.append(s)
    
    cap.append(x[2])
    if x[5] == 'D':
        cur.append(-x[3]) #negative current if in "discharge"
    else:
        cur.append(x[3])
        
    pot.append(x[4])
    ste.append(x[5])
    dst.append(x[6])

ax_pot.plot(array(tim)/3600,pot)
ax_pot.set_ylabel('Volts')
ax_pot.set_xticks([])
ax_cur.plot(array(tim)/3600,cur)
ax_cur.set_ylabel('Amps')
ax_cur.set_xlabel('Cycling Time (hr)')
ax_cur.set_ylim(min(cur)*1.1,max(cur)*(1.1))

###################################
###########EDXRD DATA##############
foop = drop_pre+"ANL_201602_EDXRD_Data/20160203_9B_l2*/*-001*"

datas = glob(foop)
datas.sort()
nos = len(datas)

# print "now with rational sorting"
nl = []
for i in range(nos):
    for g in datas:
        if g.find("_%i/" % i)>-1:
            nl.append(g)
            break
d = nl
xrdex = []

for i in range(len(d)):
    eng,inten = np.loadtxt(open(d[i]), delimiter=" ", usecols = (0,1),unpack=True)
    # ax_xrd.plot(inten+1000*i,eng*1,'k')
    xrdex.append(inten)

xrdex = array(xrdex).transpose()
boom = ax_xrd.imshow(xrdex,aspect="auto")
ax_xrd.set_ylabel("'X-Ray Energy'")
# ax_xrd.set_xlabel("'Time'")
ax_xrd.set_xticks([])
ax_xrd.set_ylim([3000,1000])
boom.set_clim([0,1500])

##################################
#########Acoustic Data############

ac = drop_pre + 'acousticdata_acee129/20160203_P_LFP_1100_C2_9b_g3'

tr = glob(ac + "*TR*.json")
tr.sort()

print len(tr)

bigdextr = []

for i in tr:
    ts = i.split("_")[-1].replace(".json","")
    f = json.load(open(i))
    bigdextr.append(abs(array(f['amp'])-127))
    
tof = f['time (us)']

bigdextr = array(bigdextr).transpose()

tickpt  = [0,99,165,231,396,494]
TR_ticktof = [int(tof[x]) for x in tickpt]

ax_tr.imshow(bigdextr,aspect="auto")
ax_tr.set_yticks(tickpt)
ax_tr.set_ylim([250,75])
ax_tr.set_yticklabels(TR_ticktof)
ax_tr.set_ylabel("Transmission\nToF ($\mu$s)")
ax_tr.set_xticks([])

showme(dpi=150)
clf()